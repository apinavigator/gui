{"id":"template","name":"Template","version":"1.0.0","subjects":[{"name":"JavaScript","topics":[{"name":"typeof","content":[{"kind":"text","value":"The typeof operator returns a string indicating the type of the operand's value."},{"kind":"javascript","value":"typeof 'Hello' // 'string'\n\ntypeof 128 // 'number'\ntypeof NaN // 'number'\n\ntypeof true // 'boolean'\n\ntypeof null // 'object'\n\ntypeof undefined // 'undefined'\n\ntypeof { foo: 'bar' } // 'object'\ntypeof [0, 1, 2] // 'object'\n\ntypeof 1n // 'bigint'\n\ntypeof Symbol('test') // 'symbol'\n\nconst myFunc = () => { console.log('Hey!') }\ntypeof myFunc // 'function'"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"]},{"name":"assign","longName":"Object.assign()","content":[{"kind":"text","value":"The Object.assign() static method copies all enumerable own properties from one or more source objects to a target object. It returns the modified target object."},{"kind":"javascript","value":"const target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target);\n// Expected output: Object { a: 1, b: 4, c: 5 }\n\nconsole.log(returnedTarget === target);\n// Expected output: true"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"]},{"name":"create","longName":"Object.create()","content":[{"kind":"text","value":"The Object.create() static method creates a new object, using an existing object as the prototype of the newly created object."},{"kind":"javascript","value":"const person = {\n  isHuman: false,\n  printIntroduction: function () {\n    console.log(`My name is $ {this.name}. Am I human? $ {this.isHuman}`);\n  },\n};\n\nconst me = Object.create(person);\n\nme.name = 'Matthew'; // \"name\" is a property set on \"me\", but not on \"person\"\nme.isHuman = true; // Inherited properties can be overwritten\n\nme.printIntroduction();\n// Expected output: \"My name is Matthew. Am I human? true\""}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"]},{"name":"defineProperties","longName":"Object.defineProperties()","content":[{"kind":"text","value":"The Object.defineProperties() static method defines new or modifies existing properties directly on an object, returning the object."},{"kind":"javascript","value":"const object1 = {};\n\nObject.defineProperties(object1, {\n  property1: {\n    value: 42,\n    writable: true,\n  },\n  property2: {},\n});\n\nconsole.log(object1.property1);\n// Expected output: 42"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties"]},{"name":"entries","longName":"Object.entries()","content":[{"kind":"text","value":"The Object.entries() static method returns an array of a given object's own enumerable string-keyed property key-value pairs."},{"kind":"javascript","value":"const object1 = {\n  a: 'somestring',\n  b: 42,\n};\n\nfor (const [key, value] of Object.entries(object1)) {\n  console.log(`$ {key}: $ {value}`);\n}\n\n// Expected output:\n// \"a: somestring\"\n// \"b: 42\""}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"]},{"name":"freeze","longName":"Object.freeze()","content":[{"kind":"text","value":"The Object.freeze() static method freezes an object. Freezing an object prevents extensions and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. freeze() returns the same object that was passed in."},{"kind":"javascript","value":"const obj = {\n  prop: 42,\n};\n\nObject.freeze(obj);\n\nobj.prop = 33;\n// Throws an error in strict mode\n\nconsole.log(obj.prop);\n// Expected output: 42"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"]},{"name":"is","longName":"Object.is()","content":[{"kind":"text","value":"The Object.is() static method determines whether two values are the same value."},{"kind":"javascript","value":"console.log(Object.is('1', 1));\n// Expected output: false\n\nconsole.log(Object.is(NaN, NaN));\n// Expected output: true\n\nconsole.log(Object.is(-0, 0));\n// Expected output: false\n\nconst obj = {};\nconsole.log(Object.is(obj, {}));\n// Expected output: false"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"]},{"name":"keys","longName":"Object.keys()","content":[{"kind":"text","value":"The Object.keys() static method returns an array of a given object's own enumerable string-keyed property names."},{"kind":"javascript","value":"const object1 = {\n  a: 'somestring',\n  b: 42,\n  c: false,\n};\n\nconsole.log(Object.keys(object1));\n// Expected output: Array [\"a\", \"b\", \"c\"]"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"]},{"name":"Map","content":[{"kind":"text","value":"The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value."},{"kind":"javascript","value":"const map1 = new Map();\n\nmap1.set('a', 1);\nmap1.set('b', 2);\nmap1.set('c', 3);\n\nconsole.log(map1.get('a'));\n// Expected output: 1\n\nmap1.set('a', 97);\n\nconsole.log(map1.get('a'));\n// Expected output: 97\n\nconsole.log(map1.size);\n// Expected output: 3\n\nmap1.delete('b');\n\nconsole.log(map1.size);\n// Expected output: 2"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"]}]},{"name":"Vitest","topics":[{"name":"expect","content":[{"kind":"text","value":"expect is used to create assertions. In this context assertions are functions that can be called to assert a statement. Vitest provides chai assertions by default and also Jest compatible assertions build on top of chai."},{"kind":"typescript","value":"import { expect } from 'vitest'\n\nconst input = Math.sqrt(4)\n\nexpect(input).to.equal(2) // chai API\nexpect(input).toBe(2) // jest API"}],"sources":["https://vitest.dev/api/expect.html#expect"]},{"name":"soft","longName":"expect.soft","content":[{"kind":"text","value":"expect.soft functions similarly to expect, but instead of terminating the test execution upon a failed assertion, it continues running and marks the failure as a test failure. All errors encountered during the test will be displayed until the test is completed."},{"kind":"typescript","value":"import { expect, test } from 'vitest'\n\ntest('expect.soft test', () => {\n  expect.soft(1 + 1).toBe(3) // mark the test as fail and continue\n  expect.soft(1 + 2).toBe(4) // mark the test as fail and continue\n})\n// At the end of the test, the above errors will be output."}],"sources":["https://vitest.dev/api/expect.html#soft"]},{"name":"not","content":[{"kind":"text","value":"Using not will negate the assertion. For example, this code asserts that an input value is not equal to 2. If it's equal, the assertion will throw an error, and the test will fail."},{"kind":"typescript","value":"import { expect, test } from 'vitest'\n\nconst input = Math.sqrt(16)\n\nexpect(input).not.to.equal(2) // chai API\nexpect(input).not.toBe(2) // jest API"}],"sources":["https://vitest.dev/api/expect.html#not"]},{"name":"toBe","content":[{"kind":"text","value":"toBe can be used to assert if primitives are equal or that objects share the same reference. It is equivalent of calling expect(Object.is(3, 3)).toBe(true). If the objects are not the same, but you want to check if their structures are identical, you can use toEqual."},{"kind":"typescript","value":"import { expect, test } from 'vitest'\n\nconst stock = {\n  type: 'apples',\n  count: 13,\n}\n\ntest('stock has 13 apples', () => {\n  expect(stock.type).toBe('apples')\n  expect(stock.count).toBe(13)\n})\n\ntest('stocks are the same', () => {\n  const refStock = stock // same reference\n\n  expect(stock).toBe(refStock)\n})"}],"sources":["https://vitest.dev/api/expect.html#tobe"]},{"name":"toBeCloseTo","content":[{"kind":"text","value":"Use toBeCloseTo to compare floating-point numbers. The optional numDigits argument limits the number of digits to check after the decimal point. For example:"},{"kind":"typescript","value":"import { expect, test } from 'vitest'\n\ntest.fails('decimals are not equal in javascript', () => {\n  expect(0.2 + 0.1).toBe(0.3) // 0.2 + 0.1 is 0.30000000000000004\n})\n\ntest('decimals are rounded to 5 after the point', () => {\n  // 0.2 + 0.1 is 0.30000 | \"000000000004\" removed\n  expect(0.2 + 0.1).toBeCloseTo(0.3, 5)\n  // nothing from 0.30000000000000004 is removed\n  expect(0.2 + 0.1).not.toBeCloseTo(0.3, 50)\n})"}],"sources":["https://vitest.dev/api/expect.html#tobecloseto"]},{"name":"toBeDefined","content":[{"kind":"text","value":"toBeDefined asserts that the value is not equal to undefined. Useful use case would be to check if function returned anything."},{"kind":"typescript","value":"import { expect, test } from 'vitest'\n\nfunction getApples() {\n  return 3\n}\n\ntest('function returned something', () => {\n  expect(getApples()).toBeDefined()\n})"}],"sources":["https://vitest.dev/api/expect.html#tobedefined"]},{"name":"toBeUndefined","content":[{"kind":"text","value":"Opposite of toBeDefined, toBeUndefined asserts that the value is equal to undefined. Useful use case would be to check if function has't returned anything."},{"kind":"typescript","value":"import { expect, test } from 'vitest'\n\nfunction getApplesFromStock(stock: string) {\n  if (stock === 'Bill')\n    return 13\n}\n\ntest(\"mary doesn't have a stock\", () => {\n  expect(getApplesFromStock('Mary')).toBeUndefined()\n})"}],"sources":["https://vitest.dev/api/expect.html#tobeundefined"]}]},{"name":"CSS","topics":[{"name":"text-decoration","content":[{"kind":"text","value":"The text-decoration shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for text-decoration-line, text-decoration-color, text-decoration-style, and the newer text-decoration-thickness property."},{"kind":"text","value":"Syntax"},{"kind":"css","value":"text-decoration: underline;\ntext-decoration: overline red;\ntext-decoration: none;\n\n/* Global values */\ntext-decoration: inherit;\ntext-decoration: initial;\ntext-decoration: revert;\ntext-decoration: revert-layer;\ntext-decoration: unset;"},{"kind":"text","value":"Example"},{"kind":"css","value":".under {\n  text-decoration: underline red;\n}\n\n.over {\n  text-decoration: wavy overline lime;\n}\n\n.line {\n  text-decoration: line-through;\n}\n\n.plain {\n  text-decoration: none;\n}\n\n.underover {\n  text-decoration: dashed underline overline;\n}\n\n.thick {\n  text-decoration: solid underline purple 4px;\n}\n\n.blink {\n  text-decoration: blink;\n}\n"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration"]},{"name":"text-align","content":[{"kind":"text","value":"The text-align CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like vertical-align but in the horizontal direction."},{"kind":"css","value":"/* Keyword values */\ntext-align: start;\ntext-align: end;\ntext-align: left;\ntext-align: right;\ntext-align: center;\ntext-align: justify;\ntext-align: justify-all;\ntext-align: match-parent;\n\n/* Block alignment values (Non-standard syntax) */\ntext-align: -moz-center;\ntext-align: -webkit-center;\n\n/* Global values */\ntext-align: inherit;\ntext-align: initial;\ntext-align: revert;\ntext-align: revert-layer;\ntext-align: unset;\n"},{"kind":"text","value":"Example"},{"kind":"css","value":".example {\n  text-align: start;\n  border: solid;\n}"}],"sources":["https://developer.mozilla.org/en-US/docs/Web/CSS/text-align"]},{"name":"visibility","content":[{"kind":"text","value":"The visibility CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a <table>."},{"kind":"css","value":"/* Keyword values */\nvisibility: visible;\nvisibility: hidden;\nvisibility: collapse;\n\n/* Global values */\nvisibility: inherit;\nvisibility: initial;\nvisibility: revert;\nvisibility: revert-layer;\nvisibility: unset;\n"},{"kind":"text","value":"Example"},{"kind":"css","value":".visible {\n  visibility: visible;\n}\n\n.not-visible {\n  visibility: hidden;\n}"}],"sources":[""]}]},{"name":"TailwindCSS","topics":[{"name":"Responsive Design","content":[{"kind":"text","value":"Using responsive utility variants to build adaptive user interfaces."},{"kind":"css","value":"/*sm*/  @media (min-width: 640px) { ... }\n/*md*/  @media (min-width: 768px) { ... }\n/*lg*/  @media (min-width: 1024px) { ... }\n/*xl*/  @media (min-width: 1280px) { ... }\n/*2xl*/ @media (min-width: 1536px) { ... }"},{"kind":"text","value":"Example"},{"kind":"html","value":"<!-- Width of 16 by default, 32 on medium screens, and 48 on large screens -->\n<img class=\"w-16 md:w-32 lg:w-48\" src=\"...\">"}],"sources":["https://tailwindcss.com/docs/responsive-design"]},{"name":"Width","content":[{"kind":"text","value":"Utilities for setting the width of an element."},{"kind":"html","value":"<div class=\"w-96 ...\">w-96</div>\n<div class=\"w-80 ...\">w-80</div>\n<div class=\"w-64 ...\">w-64</div>\n<div class=\"w-48 ...\">w-48</div>\n<div class=\"w-40 ...\">w-40</div>\n<div class=\"w-32 ...\">w-32</div>\n<div class=\"w-24 ...\">w-24</div>"}],"sources":["https://tailwindcss.com/docs/width"]},{"name":"Min-Width","content":[{"kind":"text","value":"Utilities for setting the minimum width of an element."},{"kind":"html","value":"<div class=\"w-96 ...\">\n  ...\n  <div class=\"min-w-24 ...\">min-w-24</div>\n  <div class=\"min-w-full ...\">min-w-full</div>\n</div>"}],"sources":["https://tailwindcss.com/docs/width"]},{"name":"Max-Width","content":[{"kind":"text","value":"Utilities for setting the maximum width of an element."},{"kind":"html","value":"<div>\n  <div class=\"w-full max-w-96 ...\">max-w-96</div>\n  ...\n  <div class=\"w-full max-w-24 ...\">max-w-24</div>\n</div>"}],"sources":["https://tailwindcss.com/docs/width"]},{"name":"Height","content":[{"kind":"text","value":"Utilities for setting the height of an element."},{"kind":"html","value":"<div class=\"h-96 ...\">h-96</div>\n...\n<div class=\"h-24 ...\"></div>"}],"sources":["https://tailwindcss.com/docs/height"]},{"name":"Min-Height","content":[{"kind":"text","value":"Utilities for setting the minimum height of an element."},{"kind":"html","value":"<div class=\"h-96 ...\">\n  ...\n  <div class=\"min-h-24 ...\">min-h-24</div>\n  <div class=\"min-h-full ...\">min-h-full</div>\n</div>"}],"sources":["https://tailwindcss.com/docs/min-height"]},{"name":"Max-Height","content":[{"kind":"text","value":"Utilities for setting the maximum height of an element."},{"kind":"html","value":"<div class=\"h-96 ...\">\n  ...\n  <div class=\"h-full max-h-24 ...\"></div>\n  <div class=\"h-full max-h-full ...\"></div>\n</div>"}],"sources":["https://tailwindcss.com/docs/max-height"]},{"name":"Size","content":[{"kind":"text","value":"Utilities for setting the width and height of an element at the same time."},{"kind":"html","value":"<div class=\"size-16 ...\">size-16</div>\n<div class=\"size-20 ...\">size-20</div>\n<div class=\"size-24 ...\">size-24</div>\n<div class=\"size-32 ...\">size-32</div>\n<div class=\"size-40 ...\">size-40</div>"}],"sources":["https://tailwindcss.com/docs/width"]}]},{"name":"HTTP","topics":[{"name":"Request","content":[{"kind":"text","value":"HTTP is a protocol for fetching resources such as HTML documents. It is the foundation of any data exchange on the Web and it is a client-server protocol, which means requests are initiated by the recipient, usually the Web browser. A complete document is reconstructed from the different sub-documents fetched, for instance, text, layout description, images, videos, scripts, and more."},{"kind":"text","value":"Request:"},{"kind":"http","value":"GET / HTTP/1.1\nHost: developer.mozilla.org\nAccept-Language: fr"},{"kind":"text","value":"Response:"},{"kind":"http","value":"HTTP/1.1 200 OK\nDate: Sat, 09 Oct 2010 14:28:02 GMT\nServer: Apache\nLast-Modified: Tue, 01 Dec 2009 20:18:22 GMT\nETag: \"51142bc1-7449-479b075b2891b\"\nAccept-Ranges: bytes\nContent-Length: 29769\nContent-Type: text/html\n\n<!DOCTYPE html>… (here come the 29769 bytes of the requested web page)"}],"sources":[""]}]},{"name":"TypeScript","topics":[{"name":"any","content":[{"kind":"text","value":"TypeScript also has a special type, any, that you can use whenever you don’t want a particular value to cause typechecking errors."},{"kind":"typescript","value":"let obj: any = { x: 0 };\n// None of the following lines of code will throw compiler errors.\n// Using `any` disables all further type checking, and it is assumed\n// you know the environment better than TypeScript.\nobj.foo();\nobj();\nobj.bar = 100;\nobj = \"hello\";\nconst n: number = obj;"}],"sources":["https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any"]},{"name":"Functions","content":[{"kind":"text","value":"Functions are the primary means of passing data around in JavaScript. TypeScript allows you to specify the types of both the input and output values of functions."},{"kind":"text","value":"Parameter Type Annotations"},{"kind":"typescript","value":"function greet(name: string) {\n  console.log(\"Hello, \" + name.toUpperCase() + \"!!\");\n}"},{"kind":"text","value":"Return Type Annotations"},{"kind":"typescript","value":"function getFavoriteNumber(): number {\n  return 26;\n}"},{"kind":"text","value":"Functions Which Return Promises"},{"kind":"typescript","value":"async function getFavoriteNumber(): Promise<number> {\n  return 26;\n}"}],"sources":[""]},{"name":"Object Types","content":[{"kind":"text","value":"Apart from primitives, the most common sort of type you’ll encounter is an object type. This refers to any JavaScript value with properties, which is almost all of them! To define an object type, we simply list its properties and their types."},{"kind":"typescript","value":"// The parameter's type annotation is an object type\nfunction printCoord(pt: { x: number; y: number }) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\nprintCoord({ x: 3, y: 7 });"},{"kind":"text","value":"Optional Properties"},{"kind":"typescript","value":"function printName(obj: { first: string; last?: string }) {\n  // ...\n}\n// Both OK\nprintName({ first: \"Bob\" });\nprintName({ first: \"Alice\", last: \"Alisson\" });"}],"sources":["https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#object-types"]}]},{"name":"PostgreSQL","topics":[{"name":"CREATE TABLE","content":[{"kind":"text","value":"CREATE TABLE will create a new, initially empty table in the current database. The table will be owned by the user issuing the command."},{"kind":"pgsql","value":"CREATE TABLE films (\n  code        char(5) CONSTRAINT firstkey PRIMARY KEY,\n  title       varchar(40) NOT NULL,\n  did         integer NOT NULL,\n  date_prod   date,\n  kind        varchar(10),\n  len         interval hour to minute\n);\n\nCREATE TABLE distributors (\n  did    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n  name   varchar(40) NOT NULL CHECK (name <> '')\n);"}],"sources":["https://www.postgresql.org/docs/current/sql-createtable.html"]},{"name":"INSERT","content":[{"kind":"text","value":"Inserts new rows into a table. One can insert one or more rows specified by value expressions, or zero or more rows resulting from a query."},{"kind":"text","value":"Insert a single row into table films:"},{"kind":"pgsql","value":"INSERT INTO films VALUES\n  ('UA502', 'Bananas', 105, '1971-07-13', 'Comedy', '82 minutes');"},{"kind":"text","value":"To insert multiple rows using the multirow VALUES syntax:"},{"kind":"pgsql","value":"INSERT INTO films (code, title, did, date_prod, kind) VALUES\n  ('B6717', 'Tampopo', 110, '1985-02-10', 'Comedy'),\n  ('HG120', 'The Dinner Game', 140, DEFAULT, 'Comedy');"}],"sources":["https://www.postgresql.org/docs/current/sql-insert.html"]}]},{"name":"Linux","topics":[{"name":"who","content":[{"kind":"text","value":"It is used to get information about currently logged in user on to system. If you don't provide any option or arguments, the command displays the following information for each logged-in user."},{"kind":"bash","value":"$ who\nsudheer :0 2019-08-04 01:21 (:0)"}],"sources":["https://github.com/sudheerj/Linux-cheat-sheet?tab=readme-ov-file#user-information","https://www.geeksforgeeks.org/linux-commands-cheat-sheet/"]},{"name":"whoami","content":[{"kind":"text","value":"It display the system’s username"},{"kind":"bash","value":"$ whoami\nsudheer"}],"sources":["https://github.com/sudheerj/Linux-cheat-sheet?tab=readme-ov-file#user-information"]},{"name":"grep","content":[{"kind":"text","value":"It is a powerful pattern searching tool to find information about a specific user from the system accounts file: /etc/passwd."},{"kind":"bash","value":"$ grep -i sj /etc/passwd\nsj:x:1000:1000:sj,,,:/home/sj:/bin/bash"}],"sources":["https://github.com/sudheerj/Linux-cheat-sheet?tab=readme-ov-file#user-information"]},{"name":"pwd","content":[{"kind":"text","value":"The pwd(Present Working Directory) command is used to print the name of the present/current working directory starting from the root."},{"kind":"bash","value":"$ pwd\n/home/sj/Desktop/Linux"}],"sources":["https://github.com/sudheerj/Linux-cheat-sheet?tab=readme-ov-file#user-information"]},{"name":"ls","content":[{"kind":"text","value":"The ls command is used to list files or directories. It also accepts some flags or options that changes how files or directories are listed in your terminal."},{"kind":"bash","value":"# Syntax:\nls [flags] [directory]\n\n# Example:\n$ ls\nbin dev lib libx32 mnt  \n\n# Listing files & directories with time in a rever order\n$ ls -ltr\ndrwxr-xr-x 2 sj sj 4096 May 14  2020 Videos\ndrwxr-xr-x 2 sj sj 4096 May 14  2020 Templates\ndrwxr-xr-x 2 sj sj 4096 May 14  2020 Public\n\n# Home directory\n$ ls ~\nDesktop    Downloads  Pictures  Sudheer    test   test.txt\nDocuments  Music      Public    Templates  test1  Videos"}],"sources":["https://github.com/sudheerj/Linux-cheat-sheet?tab=readme-ov-file#user-information"]}]}]}